I. Fundamentals (Essential for All Levels)
JSX (JavaScript XML):
Explanation: JSX is a syntax extension to JavaScript that allows you to write HTML-like structures within your JavaScript code. It gets transpiled to regular JavaScript function calls (React.createElement).
Why it's important: It makes React code more readable and easier to work with when building UIs.
Common Questions:
What is JSX? Why do we use it?
How does JSX differ from regular HTML?
How is JSX transformed into JavaScript? (Understand the role of Babel.)
Can you write a simple JSX snippet and explain what it does?
Can you embed JavaScript expressions within JSX? How? (Using curly braces {})
Components (Functional and Class-based):
Explanation: Components are the building blocks of React applications. They are reusable, self-contained units that manage their own state and render a user interface. React offers two ways to define components: functional components and class-based components. Functional components are simpler and generally preferred for presentational purposes, while class components are useful for more complex logic and state management.
Why it's important: Component-based architecture is a core principle of React, promoting reusability, maintainability, and separation of concerns.
Common Questions:
What are React components? Why are they important?
Explain the difference between functional components and class components. When would you use one over the other?
What are the advantages and disadvantages of functional components vs. class components?
How do you pass data from a parent component to a child component? (Props)
How do you create a simple functional component that displays a greeting message?
How do you create a class component with a constructor?
What is the purpose of this keyword in a class component?
Props (Properties):
Explanation: Props are read-only values passed from a parent component to a child component. They are used to configure and customize the child component's behavior and appearance.
Why it's important: Props are the primary mechanism for data flow between components.
Common Questions:
What are props in React?
How do you pass props to a component?
Can a child component modify its own props? (No, props are read-only.)
What is PropTypes (or prop-types library)? Why is it useful? (For type checking of props â€“ deprecated in favor of TypeScript)
How do you use default props?
Can you pass functions as props? Why would you do that? (To allow a child component to communicate with its parent.)
State:
Explanation: State is a JavaScript object that holds data that can change over time and affect the component's rendering. Unlike props, state is managed internally within the component. In functional components, you use the useState hook to manage state. In class components you use this.state.
Why it's important: State allows components to be dynamic and interactive.
Common Questions:
What is state in React?
How does state differ from props?
How do you update state in a class component? (Using this.setState)
How do you update state in a functional component? (Using the useState hook)
Why should you not directly modify state (e.g., this.state.property = newValue)? Why do you need to use setState or the state update function from useState? (To trigger a re-render and ensure React knows about the change.)
What is the difference between synchronous and asynchronous nature of setState? (setState updates may be batched for performance, making them asynchronous)
The Virtual DOM:
Explanation: React uses a virtual DOM (Document Object Model) to optimize updates to the actual DOM. When state changes, React creates a new virtual DOM and compares it to the previous one. It then efficiently updates only the parts of the actual DOM that have changed.
Why it's important: The virtual DOM significantly improves performance by minimizing direct DOM manipulation, which is a relatively slow operation.
Common Questions:
What is the virtual DOM?
How does the virtual DOM improve performance?
How does React use the virtual DOM to update the actual DOM?
What is the reconciliation process in React? (The process of comparing the virtual DOMs.)
Lifecycle Methods (Class Components - Less emphasized now with Hooks, but still important to know conceptually):
Explanation: Lifecycle methods are special methods that are called at different stages of a component's lifecycle (mounting, updating, unmounting). They allow you to perform actions at specific points in a component's life.
Why it's important: Lifecycle methods are used for tasks like fetching data, setting up event listeners, and cleaning up resources.
Common Questions:
What are React lifecycle methods?
What is the order in which the lifecycle methods are called?
Explain the purpose of componentDidMount, componentDidUpdate, and componentWillUnmount.
When would you use each of these methods?
How do lifecycle methods compare to useEffect Hook?
Event Handling:
Explanation: React provides a synthetic event system that wraps the browser's native event system. You can attach event listeners to React elements using attributes like onClick, onChange, onSubmit, etc.
Why it's important: Event handling is essential for making React applications interactive.
Common Questions:
How do you handle events in React?
How does React's event system differ from the browser's native event system? (Synthetic events, event pooling)
How do you prevent the default behavior of an event? (e.g., event.preventDefault())
How do you stop event propagation? (e.g., event.stopPropagation())
How do you pass arguments to an event handler?
What is the difference between controlled and uncontrolled components?
Lists and Keys:
Explanation: When rendering lists of elements in React, each element in the list should have a unique key prop. Keys help React efficiently update and re-render the list items.
Why it's important: Keys are crucial for performance and to prevent unexpected behavior when working with dynamic lists.
Common Questions:
Why are keys important when rendering lists in React?
What happens if you don't provide keys to list items?
What should you use as a key? (Unique identifiers, not array indexes if the list can change order)
Why are array indexes generally not recommended as keys?
Conditional Rendering:
Explanation: React allows you to conditionally render different elements based on certain conditions. You can use if statements, ternary operators, or logical operators (&&, ||) to control what is rendered.
Why it's important: Conditional rendering allows you to create dynamic and responsive UIs that adapt to different states and data.
Common Questions:
How do you conditionally render content in React?
Explain different ways to conditionally render content (e.g., if/else, ternary operator, && operator).
Give an example of when you would use each method.
Forms:
Explanation: React provides mechanisms for handling form inputs and managing form data. You can create both controlled and uncontrolled components for forms. Controlled components have their values controlled by React state, while uncontrolled components have their values controlled by the DOM.
Why it's important: Forms are essential for collecting user input.
Common Questions:
What are controlled and uncontrolled components?
What are the advantages and disadvantages of each approach?
How do you handle form submissions in React?
How do you validate form inputs?
II. Intermediate (For Candidates with 1-3 Years of Experience)
Hooks (useEffect, useState, useContext, useRef, useMemo, useCallback, useReducer, custom hooks):
Explanation: Hooks are functions that let you "hook into" React state and lifecycle features from functional components. They were introduced in React 16.8 and have become the preferred way to manage state and side effects in functional components.
Why it's important: Hooks make functional components more powerful and easier to reason about, reducing the need for class components.
Common Questions:
What are React Hooks? Why were they introduced?
Explain the purpose of useState, useEffect, useContext, useRef, useMemo, useCallback, and useReducer.
How do you use useEffect to perform side effects? What is the dependency array in useEffect? Why is it important?
How do you use useContext to share data between components?
What is the difference between useMemo and useCallback? When would you use each?
How can you create your own custom hooks?
What are the rules of Hooks? (Only call Hooks at the top level of a function component, only call Hooks from React function components or custom Hooks.)
Context API:
Explanation: The Context API provides a way to share data between components without having to explicitly pass props through every level of the component tree (prop drilling).
Why it's important: Simplifies data sharing, especially for global data like themes, user authentication status, or language preferences.
Common Questions:
What is the Context API? Why is it useful?
How do you create a context?
How do you provide a context value to components?
How do you consume a context value in a component? (Using useContext hook or Context.Consumer)
What are the limitations of the Context API? (Not ideal for highly dynamic data that changes frequently.)
When might you choose Context API over a global state management library like Redux or Zustand?
Refs (References):
Explanation: Refs provide a way to access the underlying DOM node or a React element created in the render method. They can be used to focus an input field, trigger animations, or integrate with third-party libraries that require direct DOM access.
Why it's important: Allows you to interact directly with DOM elements or React components, but should be used sparingly.
Common Questions:
What are refs in React?
How do you create a ref? (Using React.createRef in class components or useRef hook in functional components)
How do you access the DOM node or React component associated with a ref?
When should you use refs? (Focus management, accessing DOM elements for third-party libraries, triggering imperative animations)
What are the potential drawbacks of using refs excessively? (Can make code harder to test and reason about.)
Higher-Order Components (HOCs):
Explanation: A higher-order component (HOC) is a function that takes a component as an argument and returns a new, enhanced component. HOCs are a pattern for reusing component logic.
Why it's important: HOCs are a powerful way to add functionality to components without modifying their original code. However, they are less common now with the rise of Hooks.
Common Questions:
What is a higher-order component (HOC)?
How do HOCs work?
What are the benefits of using HOCs? (Code reuse, separation of concerns)
What are the drawbacks of using HOCs? (Can make code harder to debug, can lead to "wrapper hell")
Give an example of a common use case for HOCs (e.g., authentication, logging).
How do Hooks provide a similar functionality to HOCs in a more modern way?
React Router:
Explanation: React Router is a library that provides declarative routing for React applications. It allows you to define different routes for different URLs and render different components based on the current route.
Why it's important: Enables building single-page applications (SPAs) with multiple views or pages.
Common Questions:
What is React Router?
How do you define routes in React Router? (Using <BrowserRouter>, <Route>, <Link>, <Switch> components)
How do you navigate between routes? (Using <Link> or useHistory hook)
How do you pass parameters in routes? (Using URL parameters like /users/:id)
What are the different types of routers (e.g., BrowserRouter, HashRouter, MemoryRouter)? When would you use each?
How do you implement nested routes?
How do you handle 404 (Not Found) routes?
What are useParams, useLocation, and useHistory hooks?
Error Boundaries:
Explanation: Error boundaries are React components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of crashing the entire application.
Why it's important: Improves application robustness and prevents unexpected crashes.
Common Questions:
What are error boundaries?
How do you create an error boundary? (Using componentDidCatch lifecycle method in a class component)
What types of errors can error boundaries catch? (Errors during rendering, in lifecycle methods, and in constructors of the whole tree below them)
Can error boundaries catch errors in event handlers? (No, you need to handle errors in event handlers separately.)
How do error boundaries improve the user experience?
Code Splitting:
Explanation: Code splitting is the process of breaking down your application's code into smaller chunks that can be loaded on demand. This can significantly improve initial load time, especially for large applications.
Why it's important: Improves performance by reducing the amount of JavaScript that needs to be downloaded and parsed upfront.
Common Questions:
What is code splitting?
Why is code splitting important?
How can you implement code splitting in React? (Using React.lazy and Suspense, dynamic imports, or tools like Webpack)
What is React.lazy and Suspense? How do they work together?
What are the benefits of route-based code splitting?
Styling (CSS Modules, Styled Components, CSS-in-JS):
Explanation: React offers various ways to style components. CSS Modules allow you to write CSS that is locally scoped to a component, preventing naming collisions. Styled Components allow you to write CSS directly within your JavaScript code. CSS-in-JS is a broader term encompassing various libraries that allow you to write CSS in JavaScript.
Why it's important: Styling is an essential part of creating visually appealing and user-friendly applications.
Common Questions:
What are the different ways to style React components?
What are the advantages and disadvantages of each approach? (CSS Modules, Styled Components, inline styles, traditional CSS)
What are CSS Modules? How do they work?
What are Styled Components? How do they work?
What are the benefits of using CSS-in-JS libraries?
How do you handle responsive styling in React?
III. Advanced (For Experienced Candidates with 3+ Years of Experience)
State Management (Redux, Zustand, Recoil, MobX):
Explanation: State management libraries provide a centralized way to manage application state, especially in complex applications with many components that need to share data.
Why it's important: Improves code organization, testability, and maintainability in large applications.
Common Questions:
What is state management? Why is it important in large React applications?
What are some popular state management libraries for React? (Redux, Zustand, Recoil, MobX)
Explain the core principles of Redux (store, actions, reducers).
What is the Redux unidirectional data flow?
What are Redux middleware? Give examples (e.g., redux-thunk, redux-saga).
What are the advantages and disadvantages of Redux?
How does Zustand compare to Redux? (Simpler, less boilerplate)
What are the key features of Recoil? (Atoms, selectors)
How does MobX handle state management? (Using observables and reactions)
When would you choose one state management library over another? (Consider complexity, learning curve, performance requirements.)
Testing (Unit Testing, Integration Testing, E2E Testing):
Explanation: Testing is an essential part of software development. Unit tests verify the functionality of individual components or functions. Integration tests verify that different parts of the application work together correctly. End-to-end (E2E) tests simulate user interactions and verify the overall behavior of the application.
Why it's important: Ensures code quality, prevents regressions, and makes it easier to maintain and refactor the code.
Common Questions:
What are the different types of testing? (Unit, integration, E2E)
What testing libraries have you used? (Jest, Mocha, Enzyme, React Testing Library, Cypress, Selenium)
How do you write unit tests for React components?
How do you mock dependencies in your tests?
How do you test asynchronous code in React?
What is Test-Driven Development (TDD)?
What are the best practices for testing React applications?
How do you test React Hooks?
How do you test components that use the Context API?
Performance Optimization:
Explanation: Optimizing performance is crucial for providing a smooth and responsive user experience. Techniques include code splitting, memoization, virtualization, and avoiding unnecessary re-renders.
Why it's important: Improves user experience, especially for large and complex applications.
Common Questions:
What are some common performance bottlenecks in React applications?
How can you optimize the performance of React components? (Memoization, code splitting, virtualization, avoiding unnecessary re-renders)
What is memoization? How can you use React.memo, useMemo, and useCallback to memoize components and values?
What is virtualization? How can you use libraries like react-window or react-virtualized to render large lists efficiently?
How can you identify and fix performance issues in your React application? (Using the React Profiler)
How do you measure the performance of your React application? (Using tools like Lighthouse or WebPageTest)
Server-Side Rendering (SSR) and Static Site Generation (SSG):
Explanation: Server-side rendering (SSR) involves rendering React components on the server and sending the fully rendered HTML to the client. Static site generation (SSG) involves generating static HTML files at build time.
Why it's important: Improves SEO, initial load time, and accessibility.
Common Questions:
What is server-side rendering (SSR)?
What is static site generation (SSG)?
What are the benefits of SSR and SSG? (SEO, initial load time, accessibility)
What are the drawbacks of SSR and SSG? (Increased server complexity, build time)
How do you implement SSR in React? (Using frameworks like Next.js or Remix)
How do you implement SSG in React? (Using frameworks like Gatsby or Next.js)
What is the difference between SSR and SSG? When would you use one over the other?
What are the challenges of implementing SSR? (Handling state on the server, dealing with browser-specific APIs)
Design Patterns (Render Props, Compound Components, etc.):
Explanation: Design patterns are reusable solutions to common software design problems. Understanding and applying design patterns can improve code quality, maintainability, and reusability.
Why it's important: Demonstrates a deeper understanding of React and how to build complex and well-structured applications.
Common Questions:
What are some common React design patterns? (Render Props, Compound Components, Higher-Order Components, Inversion of Control)
Explain the Render Props pattern. How does it work? What are its benefits and drawbacks?
Explain the Compound Components pattern. How does it work? What are its benefits and drawbacks?
When would you use each of these patterns?
How do Hooks provide alternative solutions to some of these patterns?
WebSockets and Real-Time Applications:
Explanation: WebSockets provide a persistent connection between the client and the server, allowing for real-time communication. This is useful for applications like chat applications, collaborative editing tools, and live dashboards.
Why it's important: Enables building real-time and interactive applications.
Common Questions:
What are WebSockets? How do they differ from HTTP requests?
How can you use WebSockets in a React application?
What are some libraries or technologies you can use for WebSockets? (e.g., Socket.IO)
How do you handle authentication and authorization with WebSockets?
What are the challenges of building real-time applications with WebSockets? (Scalability, reliability)
GraphQL:
Explanation: GraphQL is a query language for your API and a server-side runtime for executing those queries. It allows clients to request only the data they need, which can improve performance and reduce over-fetching.
Why it's important: Provides a more efficient and flexible way to fetch data compared to traditional REST APIs.
Common Questions:
What is GraphQL? How does it differ from REST?
What are the benefits of using GraphQL? (Over-fetching prevention, strong typing, introspection)
What are GraphQL queries, mutations, and subscriptions?
How can you use GraphQL in a React application? (Using libraries like Apollo Client or Relay)
What are GraphQL schemas and resolvers?
How do you handle authentication and authorization with GraphQL?
What are the challenges of using GraphQL? (Complexity, caching)
IV. General Tips for React Interviews
Practice Coding: Be prepared to write code on the spot, either on a whiteboard or in a code editor. Practice implementing common React patterns and solving coding challenges.
Understand the Fundamentals: Make sure you have a solid understanding of the core concepts of React, such as JSX, components, props, state, and the virtual DOM.
Be Prepared to Explain Your Reasoning: Don't just memorize answers. Be able to explain why you chose a particular approach or solution.
Know the Trade-offs: Be aware of the advantages and disadvantages of different approaches and technologies. There is often no single "right" answer, and the best solution depends on the specific requirements of the project.
Stay Up-to-Date: React is constantly evolving, so it's important to stay up-to-date with the latest features, best practices, and libraries.
Be Ready to Discuss Your Experience: Be prepared to talk about your previous React projects and the challenges you faced. Highlight your contributions and what you learned.
Ask Questions: Asking thoughtful questions shows that you're engaged and interested in the company and the role.
